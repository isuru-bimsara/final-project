import jsPDF from "jspdf";
import "jspdf-autotable";

// Create beautiful employee PDF with enhanced structure
export const createBeautifulEmployeePDF = ({
  employees,
  department,
  currentUser,
  formatDate,
}) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;

  // Colors
  const primaryBlue = [37, 99, 235];
  const lightBlue = [239, 246, 255];
  const darkGray = [75, 85, 99];
  const lightGray = [249, 250, 251];

  // 🎨 HEADER SECTION
  doc.setFillColor(...primaryBlue);
  doc.rect(0, 0, pageWidth, 45, "F");

  // Company Logo/Title
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(22);
  doc.setFont("helvetica", "bold");
  doc.text("🏢 HR MANAGEMENT SYSTEM", 14, 18);

  // Report Title
  doc.setFontSize(16);
  doc.setFont("helvetica", "bold");
  doc.text("EMPLOYEE REPORT", 14, 28);

  // Department subtitle
  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  const deptText =
    department === "All" ? "All Departments" : `${department} Department`;
  doc.text(deptText, 14, 36);

  // Right side info box - ONLY "Generated by" info
  doc.setFillColor(255, 255, 255);
  doc.rect(pageWidth - 70, 8, 60, 29, "F");
  doc.setTextColor(...darkGray);
  doc.setFontSize(8);
  doc.setFont("helvetica", "bold");
  doc.text("GENERATED BY:", pageWidth - 66, 14);
  doc.setFont("helvetica", "normal");
  doc.text(currentUser.name, pageWidth - 66, 19);
  doc.text(`Login: ${currentUser.login}`, pageWidth - 66, 24);
  doc.text(`Role: ${currentUser.role.toUpperCase()}`, pageWidth - 66, 29);

  // 📊 SUMMARY SECTION - NO DATE/TIME
  doc.setTextColor(0, 0, 0);
  doc.setFillColor(...lightGray);
  doc.rect(14, 55, pageWidth - 28, 20, "F");
  doc.setDrawColor(200, 200, 200);
  doc.rect(14, 55, pageWidth - 28, 20, "S");

  doc.setFontSize(11);
  doc.setFont("helvetica", "bold");
  doc.text("📈 REPORT SUMMARY", 18, 63);

  doc.setFontSize(9);
  doc.setFont("helvetica", "normal");
  doc.text(`Total Employees: ${employees.length}`, 18, 69);
  doc.text(`Department Filter: ${deptText}`, 90, 69);
  // REMOVED: Generated date and time lines

  // 📋 TABLE SECTION
  const tableColumns = [
    { header: "ID", dataKey: "id" },
    { header: "EMPLOYEE NAME", dataKey: "name" },
    { header: "POSITION", dataKey: "position" },
    { header: "DEPARTMENT", dataKey: "department" },
    { header: "CONTACT", dataKey: "contact" },
    { header: "ADDRESS", dataKey: "address" },
    { header: "JOINED", dataKey: "joinDate" },
  ];

  const tableRows = employees.map((emp, index) => ({
    id: emp.employeeID || `EMP${(index + 1).toString().padStart(3, "0")}`,
    name: emp.name || "N/A",
    position: emp.position || "N/A",
    department: emp.department || "N/A",
    contact: emp.contactNumber || "N/A",
    address: emp.address
      ? emp.address.length > 25
        ? emp.address.substring(0, 25) + "..."
        : emp.address
      : "N/A",
    joinDate: emp.createdAt ? formatDate(emp.createdAt) : "N/A",
  }));

  // Generate beautiful table
  doc.autoTable({
    columns: tableColumns,
    body: tableRows,
    startY: 85,
    theme: "grid",
    styles: {
      fontSize: 8,
      cellPadding: 3,
      overflow: "linebreak",
      halign: "left",
      valign: "middle",
    },
    headStyles: {
      fillColor: primaryBlue,
      textColor: [255, 255, 255],
      fontStyle: "bold",
      fontSize: 9,
      halign: "center",
    },
    alternateRowStyles: {
      fillColor: [248, 250, 252],
    },
    columnStyles: {
      id: {
        cellWidth: 18,
        halign: "center",
        fontStyle: "bold",
        fillColor: lightBlue,
      },
      name: {
        cellWidth: 32,
        fontStyle: "bold",
      },
      position: {
        cellWidth: 28,
      },
      department: {
        cellWidth: 22,
        halign: "center",
        fontSize: 7,
      },
      contact: {
        cellWidth: 24,
      },
      address: {
        cellWidth: 32,
      },
      joinDate: {
        cellWidth: 18,
        halign: "center",
      },
    },
    margin: { left: 14, right: 14 },
    didDrawPage: (data) => {
      // 📄 FOOTER SECTION - NO DATE/TIME
      const pageCount = doc.internal.getNumberOfPages();
      const currentPage = doc.internal.getCurrentPageInfo().pageNumber;

      // Footer background
      doc.setFillColor(245, 245, 245);
      doc.rect(0, pageHeight - 20, pageWidth, 20, "F");

      // Footer text
      doc.setFontSize(8);
      doc.setTextColor(100, 100, 100);
      doc.setFont("helvetica", "normal");

      // Left side - System info
      doc.text(
        "🏢 HR Management System | Garment Factory Ltd.",
        14,
        pageHeight - 12
      );

      // Center - Page numbers
      doc.text(
        `Page ${currentPage} of ${pageCount}`,
        pageWidth / 2,
        pageHeight - 12,
        { align: "center" }
      );

      // Right side - ONLY Generated by info (NO date/time)
      doc.text(
        `Generated by: ${currentUser.name} (${currentUser.login})`,
        pageWidth - 14,
        pageHeight - 12,
        { align: "right" }
      );

      // Footer line
      doc.setDrawColor(200, 200, 200);
      doc.line(14, pageHeight - 18, pageWidth - 14, pageHeight - 18);
    },
  });

  // 📊 STATISTICS SECTION (if multiple departments)
  if (department === "All") {
    const departmentStats = employees.reduce((acc, emp) => {
      acc[emp.department] = (acc[emp.department] || 0) + 1;
      return acc;
    }, {});

    if (Object.keys(departmentStats).length > 1) {
      const finalY = doc.lastAutoTable.finalY || 85;

      doc.setFontSize(12);
      doc.setFont("helvetica", "bold");
      doc.setTextColor(...primaryBlue);
      doc.text("📊 DEPARTMENT BREAKDOWN", 14, finalY + 20);

      const statsData = Object.entries(departmentStats)
        .sort(([, a], [, b]) => b - a)
        .map(([dept, count]) => [
          dept,
          count.toString(),
          `${((count / employees.length) * 100).toFixed(1)}%`,
          "★".repeat(Math.min(5, Math.ceil((count / employees.length) * 5))),
        ]);

      doc.autoTable({
        head: [["Department", "Count", "Percentage", "Rating"]],
        body: statsData,
        startY: finalY + 25,
        theme: "striped",
        styles: {
          fontSize: 9,
          cellPadding: 4,
        },
        headStyles: {
          fillColor: [16, 185, 129],
          textColor: [255, 255, 255],
          fontStyle: "bold",
        },
        columnStyles: {
          0: { cellWidth: 50, fontStyle: "bold" },
          1: { cellWidth: 25, halign: "center", fillColor: [240, 253, 244] },
          2: { cellWidth: 25, halign: "center", fillColor: [219, 234, 254] },
          3: { cellWidth: 30, halign: "center", fontSize: 12 },
        },
        margin: { left: 14 },
      });
    }
  }

  // 💾 SAVE PDF - Simple filename without date
  const fileName = `Employee_Report_${department}_${currentUser.login}.pdf`;
  doc.save(fileName);

  // Success message - Clean without date/time
  console.log(`✅ PDF Generated Successfully: ${fileName}`);
  console.log(`📊 Total Employees: ${employees.length}`);
  console.log(`👤 Generated by: ${currentUser.name} (${currentUser.login})`);
};

// Export utility function for date formatting (still needed for employee join dates)
export const formatDateUtil = (dateStr) => {
  const d = new Date(dateStr);
  return `${(d.getMonth() + 1).toString().padStart(2, "0")}/${d
    .getDate()
    .toString()
    .padStart(2, "0")}/${d.getFullYear()}`;
};
